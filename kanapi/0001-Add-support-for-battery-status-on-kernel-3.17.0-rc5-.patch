From 1f4e79683602c43ad371944b1ebfd71c77d30cd7 Mon Sep 17 00:00:00 2001
From: Jacek Danecki <jacek.m.danecki@gmail.com>
Date: Sun, 21 Sep 2014 14:27:17 +0000
Subject: [PATCH] Add support for battery status on kernel 3.17.0-rc5 again

Temporary patch: "ACPI: temporary dep solution for battery support"
was not enough to get battery support on T100TA.

Signed-off-by: Jacek Danecki <jacek.m.danecki@gmail.com>
---
 drivers/acpi/acpica/exfield.c               |   5 +-
 drivers/i2c/busses/i2c-designware-platdrv.c | 119 ++++++++++++++++++++++++++++
 include/acpi/acpixf.h                       |   3 +
 include/linux/acpi.h                        |   1 +
 4 files changed, 126 insertions(+), 2 deletions(-)

diff --git a/drivers/acpi/acpica/exfield.c b/drivers/acpi/acpica/exfield.c
index 6907ce0..b2fd892 100644
--- a/drivers/acpi/acpica/exfield.c
+++ b/drivers/acpi/acpica/exfield.c
@@ -51,7 +51,7 @@
 ACPI_MODULE_NAME("exfield")
 
 /* Local prototypes */
-static u32
+u32
 acpi_ex_get_serial_access_length(u32 accessor_type, u32 access_length);
 
 /*******************************************************************************
@@ -69,7 +69,7 @@ acpi_ex_get_serial_access_length(u32 accessor_type, u32 access_length);
  *
  ******************************************************************************/
 
-static u32
+u32
 acpi_ex_get_serial_access_length(u32 accessor_type, u32 access_length)
 {
 	u32 length;
@@ -109,6 +109,7 @@ acpi_ex_get_serial_access_length(u32 accessor_type, u32 access_length)
 
 	return (length);
 }
+ACPI_EXPORT_SYMBOL(acpi_ex_get_serial_access_length);
 
 /*******************************************************************************
  *
diff --git a/drivers/i2c/busses/i2c-designware-platdrv.c b/drivers/i2c/busses/i2c-designware-platdrv.c
index bc87733..a9fd6e4 100644
--- a/drivers/i2c/busses/i2c-designware-platdrv.c
+++ b/drivers/i2c/busses/i2c-designware-platdrv.c
@@ -41,6 +41,7 @@
 #include <linux/io.h>
 #include <linux/slab.h>
 #include <linux/acpi.h>
+#include <acpi/actypes.h>
 #include "i2c-designware-core.h"
 
 static struct i2c_algorithm i2c_dw_algo = {
@@ -53,6 +54,122 @@ static u32 i2c_dw_get_clk_rate_khz(struct dw_i2c_dev *dev)
 }
 
 #ifdef CONFIG_ACPI
+struct dw_i2c_acpi_handler_data {
+	struct acpi_connection_info info;
+	struct platform_device *pdev;
+};
+
+static acpi_status
+dw_i2c_acpi_space_handler(u32 function, acpi_physical_address address,
+			u32 bits, u64 *value64,
+			void *handler_context, void *region_context)
+{
+	struct dw_i2c_acpi_handler_data *data = handler_context;
+	struct acpi_connection_info *info = &data->info;
+	struct dw_i2c_dev *dev = platform_get_drvdata(data->pdev);
+	struct acpi_resource_i2c_serialbus *sb;
+	struct acpi_resource *ares;
+	u8 target;
+	int ret, length;
+	u8 *value = (u8 *)value64;
+	u8 *buffer;
+	u32 accessor_type = function >> 16;
+	u8 addr = (u8)address;
+	struct i2c_msg msgs[2];
+
+
+	acpi_buffer_to_resource(info->connection, info->length, &ares);
+	if (ares->type != ACPI_RESOURCE_TYPE_SERIAL_BUS)
+		return AE_BAD_PARAMETER;
+
+	sb = &ares->data.i2c_serial_bus;
+	if (sb->type != ACPI_RESOURCE_SERIAL_TYPE_I2C)
+		return AE_BAD_PARAMETER;
+
+	pr_info("%s: Found I2C Resource type, addr %d\n",
+				__func__, sb->slave_address);
+	target = sb->slave_address;
+
+	length = acpi_ex_get_serial_access_length(accessor_type, info->access_length);
+	pr_info("%s: access opeation region, addr 0x%x operation %d len %d\n",
+		__func__, addr, function, length);
+
+	if (!value64)
+		return AE_BAD_PARAMETER;
+
+	function &= ACPI_IO_MASK; 
+	if (function == ACPI_READ) {
+		buffer = kzalloc(length, GFP_KERNEL);
+	
+		msgs[0].addr = target;
+		msgs[0].flags = 0;
+		msgs[0].len = 1;
+		msgs[0].buf = &addr;
+	
+		msgs[1].addr = target;
+		msgs[1].flags = I2C_M_RD;
+		msgs[1].len = length;
+		msgs[1].buf = buffer;
+	
+		ret = i2c_transfer(&dev->adapter, msgs, 2);
+		if (ret < 0) {
+			pr_info("%s: i2c read failed\n", __func__);	
+			return AE_ERROR;		
+		}
+	
+		memcpy(value + 2, buffer, length - 2);
+		value[0] = value[1] = 0;
+		kfree(buffer);
+	} else if (function == ACPI_WRITE) {
+//		buffer = kzalloc(length - 1, GFP_KERNEL);
+//		
+//		buffer[0] = addr;
+//		memcpy(buffer + 1, value + 2, length - 2);
+//		msgs[0].addr = target;
+//		msgs[0].flags = 0;
+//		msgs[0].len = length - 1;
+//		msgs[0].buf = buffer;
+//
+//		ret = i2c_transfer(&dev->adapter, msgs, 2);
+//		if (ret < 0) {
+//			pr_info("%s: i2c read failed\n", __func__);	
+//			return AE_ERROR;		
+//		}
+//		kfree(buffer);
+//
+	}
+
+	return AE_OK;
+}
+
+static int dw_i2c_acpi_install_space_handler(struct platform_device *pdev)
+{
+	struct acpi_device *adev = ACPI_COMPANION(&pdev->dev);
+	struct dw_i2c_acpi_handler_data *data;
+	acpi_status status;
+
+	if (!adev)
+		return -EFAULT;
+
+	data = devm_kzalloc(&pdev->dev, sizeof(struct dw_i2c_acpi_handler_data),
+			    GFP_KERNEL);
+
+	if(!data)
+		return -ENOMEM;
+
+	data->pdev = pdev;
+	status = acpi_install_address_space_handler(adev->handle,
+				ACPI_ADR_SPACE_GSBUS,
+				&dw_i2c_acpi_space_handler,
+				NULL,
+				data);
+	if (ACPI_FAILURE(status))
+		return -EFAULT;
+	return 0;
+}
+
+
+
 static void dw_i2c_acpi_params(struct platform_device *pdev, char method[],
 			       u16 *hcnt, u16 *lcnt, u32 *sda_hold)
 {
@@ -220,6 +337,8 @@ static int dw_i2c_probe(struct platform_device *pdev)
 	pm_runtime_use_autosuspend(&pdev->dev);
 	pm_runtime_set_active(&pdev->dev);
 	pm_runtime_enable(&pdev->dev);
+	dw_i2c_acpi_install_space_handler(pdev);
+	acpi_walk_dep_device_list();
 
 	return 0;
 }
diff --git a/include/acpi/acpixf.h b/include/acpi/acpixf.h
index b7c89d4..6919476 100644
--- a/include/acpi/acpixf.h
+++ b/include/acpi/acpixf.h
@@ -536,6 +536,9 @@ ACPI_EXTERNAL_RETURN_STATUS(acpi_status
  * Handler interfaces
  */
 ACPI_EXTERNAL_RETURN_STATUS(acpi_status
+		acpi_ex_get_serial_access_length
+		(u32 accessor_type, u32 access_length))
+ACPI_EXTERNAL_RETURN_STATUS(acpi_status
 			    acpi_install_initialization_handler
 			    (acpi_init_handler handler, u32 function))
 ACPI_HW_DEPENDENT_RETURN_STATUS(acpi_status
diff --git a/include/linux/acpi.h b/include/linux/acpi.h
index 807cbc4..0c8f65f 100644
--- a/include/linux/acpi.h
+++ b/include/linux/acpi.h
@@ -120,6 +120,7 @@ int acpi_boot_init (void);
 void acpi_boot_table_init (void);
 int acpi_mps_check (void);
 int acpi_numa_init (void);
+int acpi_walk_dep_device_list(void);
 
 int acpi_table_init (void);
 int acpi_table_parse(char *id, acpi_tbl_table_handler handler);
-- 
1.9.0

